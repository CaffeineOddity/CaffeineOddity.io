import{j as a,b as e,c as s,aa as n}from"./chunks/framework.Dkh8-idd.js";const u=JSON.parse('{"title":"Unity中创建预制体Prefabs","description":"","frontmatter":{"title":"Unity中创建预制体Prefabs","date":"2024-03-17T19:30:31.000Z","tags":["unity"],"cover":"https://s.yimg.com/ny/api/res/1.2/frr7UBkGb2ZttpkNPinS.g--/YXBwaWQ9aGlnaGxhbmRlcjt3PTY0MDtoPTM4NA--/https://s.yimg.com/os/creatr-uploaded-images/2023-09/dc057330-51b1-11ee-9e6f-7e13a99ea9c5","hiddenCover":true},"headers":[],"relativePath":"sop/article/图形与游戏/unity/03.Prefabs.md","filePath":"sop/article/图形与游戏/unity/03.Prefabs.md","lastUpdated":1710694215000}'),t={name:"sop/article/图形与游戏/unity/03.Prefabs.md"},p=n(`<h1 id="unity中创建预制体prefabs" tabindex="-1">Unity中创建预制体Prefabs <a class="header-anchor" href="#unity中创建预制体prefabs" aria-label="Permalink to &quot;Unity中创建预制体Prefabs&quot;">​</a></h1><p>Prefabs（预制体）是一种非常常见和有效的方式来管理和重复使用游戏对象。</p><h2 id="创建预制体" tabindex="-1">创建预制体 <a class="header-anchor" href="#创建预制体" aria-label="Permalink to &quot;创建预制体&quot;">​</a></h2><ul><li>在project中，选中右键create &gt; prefab</li><li>在Hierarchy中，将已创建的对象拖到Project面板中，弹出窗口选中Origin。</li></ul><p>创建prefab对象后，修改对应的模型，在游戏中的生成对象都会同样应用。 你也可以单独选中一个对象，修改不应用到全部。则这个prefab对象是一个独立的存在。</p><h2 id="脚本管理prefab对象" tabindex="-1">脚本管理Prefab对象 <a class="header-anchor" href="#脚本管理prefab对象" aria-label="Permalink to &quot;脚本管理Prefab对象&quot;">​</a></h2><p>由于预制体可以在需要的时候才创建，所以我们需要一个单独的管理类来控制它。</p><ul><li><p>创建脚本 Project窗口 &gt; create &gt; C# Script, 然后命名为SpawnManager.</p></li><li><p>声明一个预制体对象模型 SpawnManager 类中，声明一个公共GameObject对象<code>public GameObject prefabsObject</code>。</p></li><li><p>Hierarchy面板中，创建一个空对象 在Hierarchy面包中，创建一个EmptyObject，将SpawnManager应用到该空对象上。同时将Project面板中创建的预制体，赋值给prefabsObject。</p></li><li><p>创建一个预制体对象</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>public GameObject prefabsObject;</span></span>
<span class="line"><span>// Start is called before the first frame update</span></span>
<span class="line"><span>void Start()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   Instantiate(prefabsObject,new Vector3(0,0,6),prefabsObject.transform.rotation);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>创建预制体对象用Instantiate方法，参数为(预制体对象，positon，rotation)</p><ul><li>销毁一个预制体对象</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>private GameObject createEnemyInstance;</span></span>
<span class="line"><span>// Start is called before the first frame update</span></span>
<span class="line"><span>void Start()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   createEnemyInstance = Instantiate(perfabs,new Vector3(0,0,6),perfabs.transform.rotation);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Update is called once per frame</span></span>
<span class="line"><span>void Update()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   Destroy(createEnemyInstance); //销毁createEnemyInstance对象</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>通常我们可以通过给预制体创建一个通用Tag， 这样在游戏中需要检测是否销毁预制体时。<br> 通过<code>GameObject.FindGameObjectsWithTag(&quot;tag&quot;)</code>的方式来获取预制体数组，进而检测其是否满足销毁条件。</p><h2 id="为预制体创建一个随机位置" tabindex="-1">为预制体创建一个随机位置 <a class="header-anchor" href="#为预制体创建一个随机位置" aria-label="Permalink to &quot;为预制体创建一个随机位置&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>float xRange = Random.Range(-9,9);</span></span>
<span class="line"><span>float zRange = Random.Range(-10,10);</span></span>
<span class="line"><span>createEnemyInstance = Instantiate(perfabs,new Vector3(xRange,0,zRange),perfabs.transform.rotation);</span></span></code></pre></div>`,15),i=[p];function r(l,c,o,d,b,h){return e(),s("div",null,i)}const m=a(t,[["render",r]]);export{u as __pageData,m as default};
