import{j as s,b as a,c as e,aa as t}from"./chunks/framework.Dkh8-idd.js";const g=JSON.parse('{"title":"Supabase Github OAuth集成","description":"","frontmatter":{"title":"Supabase Github OAuth集成","date":"2024-06-10T10:00:31.000Z","tags":["Web","supabase"],"categories":["Web"],"hiddenCover":true,"cover":"https://yt3.googleusercontent.com/NuBWxGpdF0YzNSr7x_Tc8EEFXbQoHc0Xf9rU_ehxFPRikw8YPN886HltWeMDihKU8v5SeKFI3B4=s900-c-k-c0x00ffffff-no-rj"},"headers":[],"relativePath":"sop/article/frontend_dev/web/supabase/01.supabase.md","filePath":"sop/article/frontend_dev/web/supabase/01.supabase.md","lastUpdated":1729120592000}'),i={name:"sop/article/frontend_dev/web/supabase/01.supabase.md"},n=t(`<h1 id="supabase-github-集成" tabindex="-1">Supabase Github 集成 <a class="header-anchor" href="#supabase-github-集成" aria-label="Permalink to &quot;Supabase Github 集成&quot;">​</a></h1><p>Supabase 是一个开源的 Firebase 替代品，提供了数据库、认证、即时 API 等功能。GitHub OAuth 集成是一种认证机制，允许用户使用其 GitHub 账户登录到 Supabase。</p><p>以下是集成 Supabase 和 GitHub OAuth 的一般步骤：</p><ol><li><p><strong>创建 GitHub 应用</strong>：</p><ul><li>访问 GitHub 并登录您的账户。</li><li>前往 <a href="https://github.com/settings/developers" target="_blank" rel="noreferrer">GitHub Developer Settings</a>。</li><li>点击 “New OAuth App” 创建一个新的应用。</li><li>填写应用名称、主页 URL 和授权回调 URL（这通常是您的 Supabase 项目中的认证回调路由）。</li><li>完成后，您将获得一个客户端 ID 和客户端密钥，这些在集成 Supabase 时会用到。</li></ul></li><li><p><strong>配置 Supabase</strong>：</p><ul><li>登录到您的 Supabase 项目控制台。</li><li>导航到认证设置部分。</li><li>选择 “GitHub” 作为认证提供者。</li><li>输入您在创建 GitHub 应用时获得的客户端 ID 和客户端密钥。</li><li>配置回调 URL，确保它与您在 GitHub 应用设置中输入的 URL 匹配。</li></ul><p>这一步如果是本地部署环境的话，需要在supabase的config.toml中添加以下配置:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[auth]</span></span>
<span class="line"><span>site_url = &quot;http://localhost:8081&quot; # 这里需要改成你本地端口的地址</span></span>
<span class="line"><span>additional_redirect_urls = [&quot;http://localhost:8081&quot;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[auth.external.github]</span></span>
<span class="line"><span> enabled = true</span></span>
<span class="line"><span> client_id = &quot;xxx&quot;</span></span>
<span class="line"><span> # DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:</span></span>
<span class="line"><span> secret = &quot;xxxx&quot;</span></span>
<span class="line"><span> # Overrides the default auth redirectUrl.</span></span>
<span class="line"><span> redirect_uri = &quot;http://localhost:54321/auth/v1/callback&quot;</span></span>
<span class="line"><span> # Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,</span></span>
<span class="line"><span> # or any other third-party OIDC providers.</span></span>
<span class="line"><span> url = &quot;&quot;</span></span>
<span class="line"><span> # If enabled, the nonce check will be skipped. Required for local sign in with Google auth.</span></span>
<span class="line"><span> skip_nonce_check = false</span></span></code></pre></div></li></ol><p>配置完后，重启supabase项目</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">supabase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">supabase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><ol start="3"><li><strong>集成到您的应用中</strong>： <ul><li>在您的应用中设置对 Supabase 认证服务的调用。</li><li>使用 Supabase 提供的 SDK 或 API 来集成 GitHub 认证。</li><li>确保处理认证流程，包括用户登录、注册和注销。</li></ul></li><li><strong>测试集成</strong>： <ul><li>在本地或部署的应用中测试 GitHub OAuth 集成。</li><li>确保用户可以成功通过 GitHub 账户登录，并且您的应用可以获取到必要的用户信息。</li></ul></li><li><strong>部署</strong>： <ul><li>一旦测试无误，部署您的应用到生产环境。</li><li>确保所有的环境变量和配置在生产环境中都已正确设置。 请注意，具体步骤可能会因 Supabase 的更新或 GitHub 政策的变化而有所不同。因此，建议查看最新的 Supabase 文档和 GitHub 开发者指南来获取最准确的信息。同时，确保在集成过程中遵守所有相关的隐私政策和安全最佳实践。</li></ul></li></ol><h1 id="测试环境" tabindex="-1">测试环境 <a class="header-anchor" href="#测试环境" aria-label="Permalink to &quot;测试环境&quot;">​</a></h1><p>报{ &quot;code&quot;: 500, &quot;message&quot;: &quot;An error has occurred: fetch failed&quot;, &quot;requestId&quot;: &quot;5505b239-8a74-417b-bd8b-a39c00f852a2&quot; } config.toml</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">analytics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enabled = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,10),l=[n];function p(o,u,r,h,c,d){return a(),e("div",null,l)}const k=s(i,[["render",p]]);export{g as __pageData,k as default};
