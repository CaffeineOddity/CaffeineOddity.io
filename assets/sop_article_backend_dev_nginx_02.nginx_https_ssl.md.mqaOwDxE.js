import{j as s,b as a,c as n,aa as p}from"./chunks/framework.Dkh8-idd.js";const v=JSON.parse('{"title":"Nginx支持https_部署ssl证书","description":"","frontmatter":{"title":"Nginx支持https_部署ssl证书","date":"2024-04-03T17:14:31.000Z","tags":["后端","Nginx"],"categories":["后端","Nginx"],"cover":"https://miro.medium.com/v2/resize:fit:1200/0*mjG1YdoT7xPcnznN.jpg","hiddenCover":true},"headers":[],"relativePath":"sop/article/backend_dev/nginx/02.nginx_https_ssl.md","filePath":"sop/article/backend_dev/nginx/02.nginx_https_ssl.md","lastUpdated":1712178944000}'),e={name:"sop/article/backend_dev/nginx/02.nginx_https_ssl.md"},l=p(`<h1 id="nginx支持https-部署ssl证书" tabindex="-1">Nginx支持https(部署ssl证书) <a class="header-anchor" href="#nginx支持https-部署ssl证书" aria-label="Permalink to &quot;Nginx支持https(部署ssl证书)&quot;">​</a></h1><p>记一次腾讯云部署域名支持https的故障排查问题。</p><h2 id="nginx部署" tabindex="-1">nginx部署 <a class="header-anchor" href="#nginx部署" aria-label="Permalink to &quot;nginx部署&quot;">​</a></h2><p>部署见上一篇文章<a href="./01.cenos_install_nginx.html">nginx_link</a></p><h2 id="支持ssl" tabindex="-1">支持ssl <a class="header-anchor" href="#支持ssl" aria-label="Permalink to &quot;支持ssl&quot;">​</a></h2><p>由于上一次云部署采用源码编译的方式，虽然安装上了nginx，但是忘了启用ssl模块。 本次重新安装，支持ssl.</p><ul><li><p>1.下载nginx版本<a href="https://nginx.org/en/download.html" target="_blank" rel="noreferrer">nginx_version</a></p></li><li><p>2.解压版本并执行安装操作</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 解压</span></span>
<span class="line"><span>tar -zxvf nginx-1.24.0.tar.gz</span></span>
<span class="line"><span>//进入解压目录</span></span>
<span class="line"><span>cd nginx-1.24.0/</span></span></code></pre></div><ul><li>3.ssl模块配置</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>./configure --with-http_ssl_module</span></span></code></pre></div><ul><li>4.安装</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>//安装</span></span>
<span class="line"><span>make</span></span>
<span class="line"><span>sudo make install</span></span></code></pre></div><ul><li>5.确认ssl已经安装上</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nginx -V 2&gt;&amp;1 | grep -o ssl  //可以看到\`ssl\`的打印</span></span></code></pre></div><h2 id="腾讯云部署ssl" tabindex="-1">腾讯云部署ssl <a class="header-anchor" href="#腾讯云部署ssl" aria-label="Permalink to &quot;腾讯云部署ssl&quot;">​</a></h2><p>部署ssl的过程大致上是: 下载证书 &gt; 上传到云服务器nginx路径下 &gt; 配置nginx.conf &gt; 重启nginx</p><ul><li>下载ssl证书<a href="https://console.cloud.tencent.com/ssl" target="_blank" rel="noreferrer">ssl_cer</a></li><li>上传。自行用FTP工具,scp,宝塔面板都可以</li><li>配置nginx.conf</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>//编辑nginx.conf文件</span></span>
<span class="line"><span>sudo vi /usr/local/nginx/conf/nginx.conf</span></span>
<span class="line"><span>//增加一个ssl server块</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>    listen 443 ssl;</span></span>
<span class="line"><span>    server_name a.b.com; #填写您的证书绑定的域名，例如：www.cloud.tencent.com</span></span>
<span class="line"><span>    ssl_certificate /usr/local/nginx/conf/ssl_cer/com.a.b/a.b.com_bundle.crt;</span></span>
<span class="line"><span>    ssl_certificate_key /usr/local/nginx/conf/ssl_cer/com.a.b/a.b.com.key;</span></span>
<span class="line"><span>    ssl_session_timeout 1d;</span></span>
<span class="line"><span>    ssl_session_cache    shared:SSL:50m;</span></span>
<span class="line"><span>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;  # 可参考此 SSL 协议进行配置</span></span>
<span class="line"><span>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;   #可按照此加密套件配置，写法遵循 openssl 标准</span></span>
<span class="line"><span>    ssl_prefer_server_ciphers on;</span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>        root /xxx/your/project/web;</span></span>
<span class="line"><span>        index index.html;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//http 内增加一个</span></span>
<span class="line"><span>http {</span></span>
<span class="line"><span>    ssl_certificate /usr/local/nginx/conf/ssl_cer/com.a.b/a.b.com_bundle.crt;</span></span>
<span class="line"><span>    ssl_certificate_key /usr/local/nginx/conf/ssl_cer/com.a.b/a.b.com.key;</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>配置项目的http301到https</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>   server {</span></span>
<span class="line"><span>       listen 80;</span></span>
<span class="line"><span>       server_name a.b.com; # 替换为您的域名或IP地址</span></span>
<span class="line"><span>       return 301 https://$host$request_uri;     #主要是这一句。将http的域名请求转成https</span></span>
<span class="line"><span>       location / {</span></span>
<span class="line"><span>           root /xxx/your/project/web; # Vue项目构建后的输出目录</span></span>
<span class="line"><span>           index index.html;</span></span>
<span class="line"><span>           #proxy_pass http://127.0.0.1:6699;</span></span>
<span class="line"><span>           try_files $uri $uri/ /index.html; # 用于SPA路由</span></span>
<span class="line"><span>       }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>       location /api {</span></span>
<span class="line"><span>           proxy_pass http://127.0.0.1:6688;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>   }</span></span></code></pre></div><ul><li>验证及重启nginx</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo nginx -t</span></span>
<span class="line"><span>sudo systemctl restart nginx</span></span></code></pre></div><p>如果正常没意外的话，已经可以实现https访问。</p><h2 id="https访问不了页面" tabindex="-1">https访问不了页面 <a class="header-anchor" href="#https访问不了页面" aria-label="Permalink to &quot;https访问不了页面&quot;">​</a></h2><p>如无意外的话，意外就来了。由于在轻量服务器上，看到443端口已经放行。错误的以为本地已经启用了443端口，在这一步卡了大半天。</p><ul><li>检查本地是否有443端口 最终定位到是443没开启</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>//查看443是否存在</span></span>
<span class="line"><span>ss -tuln | grep 443  //这里输出为空。</span></span></code></pre></div><p>所以接下来通过防火墙启动443. 如果防火墙没有启动，您可以通过以下步骤来启动它并开放443端口：</p><ol><li><p><strong>启动防火墙</strong>：执行以下命令以启动防火墙：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo systemctl start firewalld</span></span></code></pre></div></li><li><p><strong>设置防火墙开机启动</strong>：如果您希望防火墙在系统重启后仍然处于启动状态，可以执行以下命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo systemctl enable firewalld</span></span></code></pre></div></li><li><p><strong>开放443端口</strong>：执行以下命令以允许443端口的流量通过防火墙：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo firewall-cmd --zone=public --add-port=443/tcp --permanent</span></span></code></pre></div><p>这将在防火墙配置中永久添加443端口。</p></li><li><p><strong>重新加载防火墙配置</strong>：执行以下命令以重新加载防火墙配置，使更改生效：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo firewall-cmd --reload</span></span></code></pre></div></li><li><p><strong>确认端口是否已打开</strong>：您可以运行以下命令来确保443端口已经打开：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo firewall-cmd --list-all</span></span></code></pre></div></li></ol>`,29),i=[l];function t(c,o,r,d,h,g){return a(),n("div",null,i)}const b=s(e,[["render",t]]);export{v as __pageData,b as default};
