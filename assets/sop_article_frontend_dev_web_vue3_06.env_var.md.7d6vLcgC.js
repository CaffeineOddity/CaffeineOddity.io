import{j as s,b as a,c as i,aa as n}from"./chunks/framework.Dkh8-idd.js";const E=JSON.parse('{"title":"读取.env变量","description":"","frontmatter":{"title":"读取.env变量","date":"2024-11-06 06:13","tags":["Web","Vue"],"categories":["Web"],"hiddenCover":true,"cover":"https://miro.medium.com/v2/resize:fit:500/1*CPDIH8BWrGipHRJ6o6E2Vw.png"},"headers":[],"relativePath":"sop/article/frontend_dev/web/vue3/06.env_var.md","filePath":"sop/article/frontend_dev/web/vue3/06.env_var.md","lastUpdated":null}'),e={name:"sop/article/frontend_dev/web/vue3/06.env_var.md"},p=n(`<h1 id="读取-env变量" tabindex="-1">读取.env变量 <a class="header-anchor" href="#读取-env变量" aria-label="Permalink to &quot;读取.env变量&quot;">​</a></h1><p>在vue项目中，读取.env变量，可以使用<code>process.env</code>来读取。</p><h3 id="一、-安装环境" tabindex="-1">一、 安装环境 <a class="header-anchor" href="#一、-安装环境" aria-label="Permalink to &quot;一、 安装环境&quot;">​</a></h3><p>依赖dotenv库，安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dotenv</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div><h3 id="二、-配置-env文件" tabindex="-1">二、 配置.env文件 <a class="header-anchor" href="#二、-配置-env文件" aria-label="Permalink to &quot;二、 配置.env文件&quot;">​</a></h3><p>在项目根目录下，创建.env文件，在文件中配置变量：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span></span></code></pre></div><h3 id="三、-vite-config-js中配置运行端口" tabindex="-1">三、 vite.config.js中配置运行端口 <a class="header-anchor" href="#三、-vite-config-js中配置运行端口" aria-label="Permalink to &quot;三、 vite.config.js中配置运行端口&quot;">​</a></h3><p>在vue项目中，vite.config.js中配置运行端口：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dotenv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dotenv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dotenv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8888</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`当前端口: \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="四、-创建运行脚本" tabindex="-1">四、 创建运行脚本 <a class="header-anchor" href="#四、-创建运行脚本" aria-label="Permalink to &quot;四、 创建运行脚本&quot;">​</a></h3><p>在项目根目录下，创建运行脚本<code>run_web.sh</code>：</p><div class="language-run_web.sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">run_web.sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 读取.env文件中的PORT配置</span></span>
<span class="line"><span>PORT=$(grep &quot;^PORT=&quot; .env | cut -d &#39;=&#39; -f2 || echo &quot;8080&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 查找并终止占用指定端口的进程</span></span>
<span class="line"><span>pid=$(lsof -t -i:$PORT)</span></span>
<span class="line"><span>if [ ! -z &quot;$pid&quot; ]; then</span></span>
<span class="line"><span>    echo &quot;正在终止端口 $PORT 上的进程...&quot;</span></span>
<span class="line"><span>    kill -9 $pid</span></span>
<span class="line"><span>fi</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 运行npm dev</span></span>
<span class="line"><span>echo &quot;启动开发服务器...&quot;</span></span>
<span class="line"><span>npm run dev</span></span></code></pre></div>`,14),t=[p];function l(h,k,d,r,o,c){return a(),i("div",null,t)}const v=s(e,[["render",l]]);export{E as __pageData,v as default};
